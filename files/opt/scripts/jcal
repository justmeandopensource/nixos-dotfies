#!/usr/bin/env python3

import icalendar
from datetime import datetime, timedelta
from pathlib import Path
import re
import sys
import os
import argparse
from colored import fore, style

JCAL_BASE_DIR = "%s/.local/share/jcal" % os.environ["HOME"]
JCAL_DIR = JCAL_BASE_DIR + "/calendars/wenkatn/wenkatn@gmail.com"

## UNICODE SYMBOLS
U_ERROR = "\uf00d"

def jcal_check():
    if not os.path.isdir(JCAL_BASE_DIR):
        print(fore.ORANGE_1 + "\n %s jcal directory missing" % U_ERROR + style.RESET + " - %s" % JCAL_DIR)
        sys.exit(1)
    if not os.path.isdir(JCAL_DIR):
        print(fore.ORANGE_1 + "\n %s jcal wenatn@gmail.com calendar doesn't exist" % U_ERROR + style.RESET + " - %s" % JCAL_DIR)
        sys.exit(1)

def jcal_list(keyword):
    jcal_check()
    ics_files = Path(JCAL_DIR).glob("*.ics")
    events_completed = []
    events_upcoming  = []
    for ics in ics_files:
        with open(str(ics), "r") as ics_file:
            ics_raw = icalendar.Calendar.from_ical(ics_file.read())
            components = filter(lambda c: c.name=='VEVENT', ics_raw.walk())
            for component in components:
                summary = component.get("summary")
                if re.search(keyword, summary, re.IGNORECASE):
                    raw_stdate = component.get("dtstart").dt
                    fmt_date = raw_stdate.strftime("%Y-%m-%d %H:%M")
                    fmt_date_date = raw_stdate.strftime("%Y-%m-%d")
                    fmt_date_time = raw_stdate.strftime("%H:%M")
                    if fmt_date < datetime.now().strftime("%Y-%m-%d %H:%M"):
                        events_completed.append([fmt_date_date, fmt_date_time, summary])
                    else:
                        events_upcoming.append([fmt_date_date, fmt_date_time, summary])
    print()
    for event in sorted(events_completed, key=lambda x: x[0]):
        print(fore.LIGHT_GRAY + " %s [%s] %s" % (event[0], event[1], event[2]) + style.RESET)
    for event in sorted(events_upcoming, key=lambda x: x[0]):
        print(" " + event[0] + fore.YELLOW + " [%s] " % event[1] + fore.LIGHT_GREEN + event[2] + style.RESET)

def jcal_agenda():
    jcal_check()
    ics_files = Path(JCAL_DIR).glob("*.ics")
    events = []
    for ics in ics_files:
        with open(str(ics), "r") as ics_file:
            ics_raw = icalendar.Calendar.from_ical(ics_file.read())
            components = filter(lambda c: c.name=='VEVENT', ics_raw.walk())
            for component in components:
                summary = component.get("summary")
                raw_stdate = component.get("dtstart").dt
                fmt_date = raw_stdate.strftime("%Y-%m-%d %H:%M")
                fmt_date_date = raw_stdate.strftime("%Y-%m-%d")
                fmt_date_time = raw_stdate.strftime("%H:%M")
                if fmt_date > datetime.now().strftime("%Y-%m-%d %H:%M"):
                    events.append([fmt_date_date, fmt_date_time, summary])
    print()
    for event in sorted(events, key=lambda x: x[0]):    
        print(" " + event[0] + fore.YELLOW + " [%s] " % event[1] + fore.LIGHT_GREEN + event[2] + style.RESET)

def main():
    parser = argparse.ArgumentParser(description="Jungle Calendar!")
    subparsers = parser.add_subparsers(dest="action")
    
    subparser_agenda = subparsers.add_parser("agenda", help="show next specified list of events. Default 10")
    subparser_list = subparsers.add_parser("list", help="search jungle calendar")
    subparser_list.add_argument("keyword", help="search keyword", nargs="?", default=".*")

    args = parser.parse_args()

    if args.action == "list":
        jcal_list(args.keyword)
    elif args.action == "agenda":
        jcal_agenda()
    else:
        parser.parse_args(["--help"])
        sys.exit(1)

if __name__ == "__main__":
    main()